{"version":3,"sources":["services/potterapi.ts","features/sortingHat/sortingHatSlices.ts","styles/keyframes.ts","styles/common.ts","features/sortingHat/sortingHatStyles.ts","components/LoadingContainer.tsx","styles/theme.ts","features/sortingHat/SortingHat.tsx","App.tsx","app/store.ts","serviceWorker.ts","styles/global.ts","index.tsx"],"names":["apiUrl","a","fetch","then","response","json","sortingHatSlice","createSlice","name","initialState","value","isLoading","reducers","setSortingHat","state","action","payload","setIsLoading","actions","setSortingHatAsync","dispatch","getSortingHat","selectSortingHat","sortingHat","selectSortingHatIsLoading","floating","keyframes","rotating","row","css","rotatingKeyframes","fontHarryP","button","theme","colors","textPrimary","primary","secondary","accent","LoadingContainer","children","props","minHeight","wrapperStyle","fontSize","accentDark","background","SortingHat","args","useDispatch","useSelector","useEffect","styles","map","arg","onClick","App","AppLogo","AppHeader","link","navigation","to","path","store","configureStore","reducer","sortingHatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","global","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03825b73.chunk.js","sourcesContent":["const apiUrl = \"https://www.potterapi.com/v1\";\n\nexport async function getSortingHat() {\n  return fetch(`${apiUrl}/sortingHat`).then((response) => {\n    return response.json();\n  });\n}\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\nimport { AppThunk, RootState } from \"../../app/store\";\n\nimport { getSortingHat } from \"services/potterapi\";\n\ninterface SortingHatState {\n  value: string;\n  isLoading: boolean;\n}\n\nconst initialState: SortingHatState = {\n  value: \"\",\n  isLoading: false,\n};\n\nexport const sortingHatSlice = createSlice({\n  name: \"sortingHat\",\n  initialState,\n  reducers: {\n    setSortingHat: (state, action: PayloadAction<string>) => {\n      state.value = action.payload;\n    },\n    setIsLoading: (state, action: PayloadAction<boolean>) => {\n      state.isLoading = action.payload;\n    },\n  },\n});\n\nexport const { setSortingHat, setIsLoading } = sortingHatSlice.actions;\n\nexport const setSortingHatAsync = (): AppThunk => (dispatch) => {\n  dispatch(setIsLoading(true));\n  getSortingHat().then((value) => {\n    dispatch(setSortingHat(value));\n    dispatch(setIsLoading(false));\n  });\n};\n\nexport const selectSortingHat = (state: RootState) => state.sortingHat.value;\nexport const selectSortingHatIsLoading = (state: RootState) =>\n  state.sortingHat.isLoading;\n\nexport default sortingHatSlice.reducer;\n","import { keyframes } from \"@emotion/core\";\n\nexport const floating = keyframes`\n  0% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(10px)\n  }\n  100% {\n    transform: translateY(0px)\n  }\n  `;\n\nexport const rotating = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n","import { css } from \"@emotion/core\";\n\nimport { rotating as rotatingKeyframes } from \"./keyframes\";\nimport { Theme } from \"./theme\";\n\nexport const button = (theme: Theme) => css`\n  label: button;\n  appearance: none;\n  background: none;\n  font-size: 32px;\n  padding-left: 12px;\n  padding-right: 12px;\n  outline: none;\n  border: 2px solid transparent;\n  color: ${theme.colors.textPrimary[0]};\n  padding-bottom: 4px;\n  cursor: pointer;\n  background-color: ${theme.colors.primary[0]};\n  border-radius: 2px;\n  transition: all 0.15s;\n  &:hover,\n  &:focus {\n    border: 2px solid ${theme.colors.secondary[0]};\n  }\n  &:active {\n    background-color: ${theme.colors.accent};\n  }\n`;\n\nexport const row = css`\n  label: row;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  &:not(:last-child) {\n    margin-bottom: 16px;\n  }\n`;\n\nexport const value = css`\n  label: value;\n  font-size: 78px;\n  padding-left: 16px;\n  padding-right: 16px;\n  margin-top: 2px;\n  font-family: \"Courier New\", Courier, monospace;\n`;\n\nexport const rotating = css`\n  animation: ${rotatingKeyframes} 2s linear infinite;\n`;\n\nexport const fontHarryP = css`\n  font-family: HarryP;\n`;\n","import { button, row, value } from \"styles/common\";\n\nexport default {\n  row,\n  value,\n  button,\n};\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\nimport { ReactNode } from \"react\";\n\nimport { rotating } from \"styles/common\";\n\ninterface LoadingContainerProps {\n  isLoading: boolean;\n  children: ReactNode;\n  minHeight?: string;\n}\n\nfunction LoadingContainer({\n  isLoading,\n  children,\n  minHeight,\n  ...props\n}: LoadingContainerProps) {\n  const wrapperStyle = css`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  `;\n\n  return (\n    <div css={wrapperStyle} {...props}>\n      {isLoading ? <AutorenewIcon css={rotating} fontSize=\"large\" /> : children}\n    </div>\n  );\n}\n\nexport default LoadingContainer;\n","import { SerializedStyles } from \"@emotion/core\";\n\ninterface ThemeColor {\n  primary: string[];\n  secondary: string[];\n  accent: string[];\n  accentDark: string[];\n  textPrimary: string[];\n  background: string[];\n}\n\nexport interface Theme {\n  colors: ThemeColor;\n}\n\nconst theme: Theme = {\n  colors: {\n    primary: [\"#000050\"],\n    secondary: [\"#753300\"],\n    accent: [\"#000000\"],\n    accentDark: [\"#000000\"],\n    textPrimary: [\"#ffffff\"],\n    background: [\"#121212\"],\n  },\n};\n\nexport const griffindor: Theme = {\n  colors: {\n    primary: [\"#740001\"],\n    secondary: [\"#ae0001\"],\n    accent: [\"#eeba30\"],\n    accentDark: [\"#d3a625\"],\n    textPrimary: [\"#000000\"],\n    background: [\"#121212\"],\n  },\n};\n\n// Fixed in emotion 11 (https://github.com/emotion-js/emotion/issues/1606)\n// css={withTheme([(theme) => {}, {}])} => css={[(theme) => {}, {}]}\nexport const withTheme = (\n  args: Array<SerializedStyles | ((theme: Theme) => SerializedStyles)>\n) => {\n  return (theme: Theme) => [\n    ...args.map((arg) => {\n      if (typeof arg === \"function\") {\n        return arg(theme);\n      }\n      return arg;\n    }),\n  ];\n};\n\nexport default theme;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  selectSortingHat,\n  selectSortingHatIsLoading,\n  setSortingHatAsync,\n} from \"./sortingHatSlices\";\n\nimport styles from \"./sortingHatStyles\";\n\nimport LoadingContainer from \"components/LoadingContainer\";\nimport { fontHarryP } from \"styles/common\";\nimport { withTheme } from \"styles/theme\";\n\nfunction SortingHat() {\n  const dispatch = useDispatch();\n  const sortingHat = useSelector(selectSortingHat);\n  const isLoading = useSelector(selectSortingHatIsLoading);\n\n  useEffect(() => {\n    if (!sortingHat) {\n      dispatch(setSortingHatAsync());\n    }\n  }, [dispatch, sortingHat]);\n\n  return (\n    <div>\n      <div css={styles.row}>\n        <LoadingContainer\n          css={css`\n            min-height: 90px;\n          `}\n          isLoading={isLoading}\n        >\n          <span css={[styles.value, fontHarryP]}>{sortingHat}</span>\n        </LoadingContainer>\n      </div>\n      <div css={styles.row}>\n        <button\n          css={withTheme([styles.button])}\n          onClick={() => dispatch(setSortingHatAsync())}\n        >\n          Randomize\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default SortingHat;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\n\nimport { NavLink, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport SortingHat from \"features/sortingHat/SortingHat\";\nimport { fontHarryP } from \"styles/common\";\nimport { floating } from \"styles/keyframes\";\nimport { Theme } from \"styles/theme\";\n\nconst styles = {\n  App: css`\n    text-align: center;\n  `,\n  AppLogo: css`\n    label: AppLogo;\n    height: 40vmin;\n    user-select: none;\n    pointer-events: none;\n    font-size: 5em;\n    @media (prefers-reduced-motion: no-preference) {\n      animation: ${floating} infinite 3s ease-in-out;\n    }\n    & > div + div {\n      margin-top: -24px;\n    }\n  `,\n  AppHeader: css`\n    label: AppHeader;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n  `,\n  link: (theme: Theme) => css`\n    color: ${theme.colors.primary[0]};\n  `,\n  navigation: css`\n    display: flex;\n\n    & > li {\n      margin: 0 12px;\n      padding: 8px 0;\n    }\n  `,\n};\n\nfunction App() {\n  return (\n    <div css={styles.App}>\n      <header css={styles.AppHeader}>\n        <div css={[styles.AppLogo, fontHarryP]}>\n          <div>Potter</div>\n          <div>Page</div>\n        </div>\n        <ul css={styles.navigation}>\n          <li>\n            <NavLink css={styles.link} to=\"/sorting-hat\">\n              Sorting Hat\n            </NavLink>\n          </li>\n        </ul>\n        <Switch>\n          <Route path=\"/sorting-hat\">\n            <SortingHat />\n          </Route>\n          <Route path=\"*\">\n            <Redirect to=\"/sorting-hat\" />\n          </Route>\n        </Switch>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { Action, ThunkAction, configureStore } from \"@reduxjs/toolkit\";\n\nimport sortingHatReducer from \"features/sortingHat/sortingHatSlices\";\n\nexport const store = configureStore({\n  reducer: {\n    sortingHat: sortingHatReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { css } from \"@emotion/core\";\n\nexport default css`\n  @font-face {\n    font-family: \"HarryP\";\n    src: url(\"./fonts/HarryP.ttf\") format(\"truetype\");\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\",\n      \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\",\n      \"Helvetica Neue\", sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n      monospace;\n  }\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n\n  li {\n    list-style-type: none;\n  }\n\n  a {\n    color: inherit;\n    text-decoration: none;\n  }\n`;\n","import { Global } from \"@emotion/core\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport global from \"styles/global\";\nimport theme from \"styles/theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Global styles={global} />\n      <ThemeProvider theme={theme}>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </ThemeProvider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}