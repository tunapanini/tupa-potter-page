{"version":3,"sources":["styles/themes.ts","features/theme/themeSlices.ts","services/potterapi.ts","features/sortingHat/sortingHatSlices.ts","styles/keyframes.ts","styles/common.ts","features/sortingHat/sortingHatStyles.ts","components/LoadingContainer.tsx","features/sortingHat/SortingHat.tsx","App.tsx","app/modules/root.ts","app/store.ts","serviceWorker.ts","styles/global.ts","index.tsx"],"names":["defaultTheme","colors","primary","secondary","accent","accentDark","textWhite","textBlack","textPrimary","background","gryffindor","ravenclaw","hufflepuff","slytherin","initialState","value","default","themeSlice","createSlice","name","reducers","setTheme","state","action","house","payload","Ravenclaw","Slytherin","Hufflepuff","Gryffindor","actions","selectTheme","theme","apiUrl","a","fetch","then","response","json","sortingHatSlice","isLoading","setSortingHat","setIsLoading","setSortingHatAsync","selectSortingHat","sortingHat","selectSortingHatIsLoading","floating","keyframes","rotating","row","css","rotatingKeyframes","fontHarryP","button","LoadingContainer","children","props","minHeight","wrapperStyle","fontSize","SortingHat","args","dispatch","useDispatch","useSelector","useEffect","styles","map","arg","onClick","App","AppLogo","AppHeader","link","navigation","to","path","rootEpic","combineEpics","action$","pipe","ofType","type","switchMapTo","concat","of","defer","getSortingHat","mergeMap","rootReducer","combineReducers","sortingHatReducer","themeReducer","epicMiddleware","createEpicMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_햐COMPOSE__","compose","store","createStore","applyMiddleware","run","Boolean","location","hostname","match","ReactDOM","render","StrictMode","global","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84d62b1f.chunk.js","sourcesContent":["import { SerializedStyles } from \"@emotion/core\";\n\nimport { House } from \"./../services/potterapi\";\n\ninterface ThemeColor {\n  primary: string[];\n  secondary: string[];\n  accent: string[];\n  accentDark: string[];\n  textWhite: string[];\n  textBlack: string[];\n  textPrimary: string[];\n  background: string[];\n}\n\nexport interface Theme {\n  colors: ThemeColor;\n}\n\nconst defaultTheme: Theme = {\n  colors: {\n    primary: [\"#555555\"],\n    secondary: [\"#333333\"],\n    accent: [\"#000050\"],\n    accentDark: [\"#121212\"],\n    textWhite: [\"#ffffff\"],\n    textBlack: [\"#000000\"],\n    textPrimary: [\"#ffffff\"],\n    background: [\"#fafafa\"],\n  },\n};\n\nconst gryffindor: Theme = {\n  colors: {\n    ...defaultTheme.colors,\n    primary: [\"#740001\"],\n    secondary: [\"#ae0001\"],\n    accent: [\"#eeba30\"],\n    accentDark: [\"#d3a625\"],\n  },\n};\n\nconst ravenclaw: Theme = {\n  colors: {\n    ...defaultTheme.colors,\n    primary: [\"#0e1a40\"],\n    secondary: [\"#222f5b\"],\n    accent: [\"#5d5d5d\"],\n    accentDark: [\"#946b2d\"],\n  },\n};\n\nconst hufflepuff: Theme = {\n  colors: {\n    ...defaultTheme.colors,\n    primary: [\"#ecb939\"],\n    secondary: [\"#f0c75e\"],\n    accent: [\"#726255\"],\n    accentDark: [\"#372e29\"],\n  },\n};\n\nconst slytherin: Theme = {\n  colors: {\n    ...defaultTheme.colors,\n    primary: [\"#284d16\"],\n    secondary: [\"#1d3c0e\"],\n    accent: [\"#42473f\"],\n    accentDark: [\"#232721\"],\n  },\n};\n\n// Fixed in emotion 11 (https://github.com/emotion-js/emotion/issues/1606)\n// css={withTheme([(theme) => {}, {}])} => css={[(theme) => {}, {}]}\nexport const withTheme = (\n  args: Array<SerializedStyles | ((theme: Theme) => SerializedStyles)>\n) => {\n  return (theme: Theme) => [\n    ...args.map((arg) => {\n      if (typeof arg === \"function\") {\n        return arg(theme);\n      }\n      return arg;\n    }),\n  ];\n};\n\nexport const getThemeByHouse = (house: House) =>\n  ({\n    Ravenclaw: ravenclaw,\n    Slytherin: slytherin,\n    Hufflepuff: hufflepuff,\n    Gryffindor: gryffindor,\n  }[house]);\n\nexport default {\n  default: defaultTheme,\n  gryffindor,\n  ravenclaw,\n  hufflepuff,\n  slytherin,\n};\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../app/store\";\n\nimport { House } from \"services/potterapi\";\nimport themes, { Theme, getThemeByHouse } from \"styles/themes\";\n\ninterface ThemeState {\n  value: Theme;\n}\n\nconst initialState: ThemeState = {\n  value: themes.default,\n};\n\nexport const themeSlice = createSlice({\n  name: \"currentTheme\",\n  initialState,\n  reducers: {\n    setTheme: (state, action: PayloadAction<House>) => {\n      state.value = getThemeByHouse(action.payload);\n    },\n  },\n});\n\nexport const { setTheme } = themeSlice.actions;\n\nexport const selectTheme = (state: RootState) => state.theme.value;\n\nexport default themeSlice.reducer;\n","const apiUrl = \"https://www.potterapi.com/v1\";\n\nexport type House = \"Ravenclaw\" | \"Slytherin\" | \"Gryffindor\" | \"Hufflepuff\";\n\nexport async function getSortingHat(): Promise<House> {\n  return fetch(`${apiUrl}/sortingHat`).then((response) => {\n    return response.json();\n  });\n}\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\nimport { Epic, ofType } from \"redux-observable\";\nimport { concat, defer, of } from \"rxjs\";\nimport { mergeMap, switchMapTo } from \"rxjs/operators\";\n\nimport { RootState } from \"app/store\";\n\nimport { setTheme } from \"features/theme/themeSlices\";\nimport { getSortingHat } from \"services/potterapi\";\n\ninterface SortingHatState {\n  value: string;\n  isLoading: boolean;\n}\n\nconst initialState: SortingHatState = {\n  value: \"\",\n  isLoading: false,\n};\n\nexport const sortingHatSlice = createSlice({\n  name: \"sortingHat\",\n  initialState,\n  reducers: {\n    setSortingHat: (state, action: PayloadAction<string>) => {\n      state.value = action.payload;\n    },\n    setIsLoading: (state, action: PayloadAction<boolean>) => {\n      state.isLoading = action.payload;\n    },\n    setSortingHatAsync: () => {},\n  },\n});\n\nexport const {\n  setSortingHat,\n  setIsLoading,\n  setSortingHatAsync,\n} = sortingHatSlice.actions;\n\nexport const setSortingHatEpic: Epic = (action$) =>\n  action$.pipe(\n    ofType(setSortingHatAsync.type),\n    switchMapTo(\n      concat(\n        of(setIsLoading(true)),\n        defer(() => getSortingHat()).pipe(\n          mergeMap((value) =>\n            concat(\n              of(setSortingHat(value)),\n              of(setIsLoading(false)),\n              of(setTheme(value))\n            )\n          )\n        )\n      )\n    )\n  );\n\nexport const selectSortingHat = (state: RootState) => state.sortingHat.value;\nexport const selectSortingHatIsLoading = (state: RootState) =>\n  state.sortingHat.isLoading;\n\nexport default sortingHatSlice.reducer;\n","import { keyframes } from \"@emotion/core\";\n\nexport const floating = keyframes`\n  0% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(10px)\n  }\n  100% {\n    transform: translateY(0px)\n  }\n  `;\n\nexport const rotating = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n","import { css } from \"@emotion/core\";\n\nimport { rotating as rotatingKeyframes } from \"./keyframes\";\nimport { Theme } from \"./themes\";\n\nexport const button = (theme: Theme) => css`\n  label: button;\n  appearance: none;\n  background: none;\n  font-size: 32px;\n  padding-left: 12px;\n  padding-right: 12px;\n  outline: none;\n  border: 2px solid transparent;\n  color: ${theme.colors.textWhite[0]};\n  padding-bottom: 4px;\n  cursor: pointer;\n  background-color: ${theme.colors.primary[0]};\n  border-radius: 2px;\n  transition: all 0.15s;\n  &:hover,\n  &:focus {\n    border: 2px solid ${theme.colors.secondary[0]};\n  }\n  &:active {\n    background-color: ${theme.colors.accent};\n  }\n`;\n\nexport const row = css`\n  label: row;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  &:not(:last-child) {\n    margin-bottom: 16px;\n  }\n`;\n\nexport const value = css`\n  label: value;\n  font-size: 78px;\n  padding-left: 16px;\n  padding-right: 16px;\n  margin-top: 2px;\n  font-family: \"Courier New\", Courier, monospace;\n`;\n\nexport const rotating = css`\n  animation: ${rotatingKeyframes} 2s linear infinite;\n`;\n\nexport const fontHarryP = css`\n  font-family: HarryP;\n`;\n","import { button, row, value } from \"styles/common\";\n\nexport default {\n  row,\n  value,\n  button,\n};\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\nimport { ReactNode } from \"react\";\n\nimport { rotating } from \"styles/common\";\n\ninterface LoadingContainerProps {\n  isLoading: boolean;\n  children: ReactNode;\n  minHeight?: string;\n}\n\nfunction LoadingContainer({\n  isLoading,\n  children,\n  minHeight,\n  ...props\n}: LoadingContainerProps) {\n  const wrapperStyle = css`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  `;\n\n  return (\n    <div css={wrapperStyle} {...props}>\n      {isLoading ? <AutorenewIcon css={rotating} fontSize=\"large\" /> : children}\n    </div>\n  );\n}\n\nexport default LoadingContainer;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  selectSortingHat,\n  selectSortingHatIsLoading,\n  setSortingHatAsync,\n} from \"./sortingHatSlices\";\n\nimport styles from \"./sortingHatStyles\";\n\nimport LoadingContainer from \"components/LoadingContainer\";\nimport { fontHarryP } from \"styles/common\";\nimport { withTheme } from \"styles/themes\";\n\nfunction SortingHat() {\n  const dispatch = useDispatch();\n  const sortingHat = useSelector(selectSortingHat);\n  const isLoading = useSelector(selectSortingHatIsLoading);\n\n  useEffect(() => {\n    if (!sortingHat) {\n      dispatch(setSortingHatAsync());\n    }\n  }, [dispatch, sortingHat]);\n\n  const handleClick = () => dispatch(setSortingHatAsync());\n\n  return (\n    <div>\n      <div css={styles.row}>\n        <LoadingContainer\n          css={css`\n            min-height: 90px;\n          `}\n          isLoading={isLoading}\n        >\n          <span css={[styles.value, fontHarryP]}>{sortingHat}</span>\n        </LoadingContainer>\n      </div>\n      <div css={styles.row}>\n        <button css={withTheme([styles.button])} onClick={handleClick}>\n          Randomize\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default SortingHat;\n","/** @jsx jsx */\n\nimport { css, jsx } from \"@emotion/core\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport { useSelector } from \"react-redux\";\nimport { NavLink, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport SortingHat from \"features/sortingHat/SortingHat\";\nimport { selectTheme } from \"features/theme/themeSlices\";\nimport { fontHarryP } from \"styles/common\";\nimport { floating } from \"styles/keyframes\";\nimport { Theme } from \"styles/themes\";\n\nconst styles = {\n  App: (theme: Theme) => css`\n    text-align: center;\n    background-color: ${theme.colors.background};\n  `,\n  AppLogo: css`\n    label: AppLogo;\n    user-select: none;\n    pointer-events: none;\n    font-size: 5em;\n    @media (prefers-reduced-motion: no-preference) {\n      animation: ${floating} infinite 3s ease-in-out;\n    }\n    & > div + div {\n      margin-top: -24px;\n    }\n  `,\n  AppHeader: css`\n    label: AppHeader;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n  `,\n  link: (theme: Theme) => css`\n    color: ${theme.colors.primary[0]};\n  `,\n  navigation: css`\n    display: flex;\n\n    & > li {\n      margin: 0 12px;\n      padding: 8px 0;\n    }\n  `,\n};\n\nfunction App() {\n  const theme = useSelector(selectTheme);\n  return (\n    <ThemeProvider theme={theme}>\n      <div css={styles.App}>\n        <header css={styles.AppHeader}>\n          <div css={[styles.AppLogo, fontHarryP]}>\n            <div>&#167;</div>\n            <div>Page</div>\n          </div>\n          <ul css={styles.navigation}>\n            <li>\n              <NavLink css={styles.link} to=\"/sorting-hat\">\n                Sorting Hat\n              </NavLink>\n            </li>\n          </ul>\n          <Switch>\n            <Route path=\"/sorting-hat\">\n              <SortingHat />\n            </Route>\n            <Route path=\"*\">\n              <Redirect to=\"/sorting-hat\" />\n            </Route>\n          </Switch>\n        </header>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport { combineEpics } from \"redux-observable\";\n\nimport sortingHatReducer, {\n  setSortingHatEpic,\n} from \"./../../features/sortingHat/sortingHatSlices\";\n\nimport themeReducer from \"features/theme/themeSlices\";\n\nexport const rootEpic = combineEpics(setSortingHatEpic);\n\nexport const rootReducer = combineReducers({\n  sortingHat: sortingHatReducer,\n  theme: themeReducer,\n});\n","import { Action, ThunkAction, compose } from \"@reduxjs/toolkit\";\n\nimport { applyMiddleware, createStore } from \"redux\";\nimport { createEpicMiddleware } from \"redux-observable\";\n\nimport { rootEpic, rootReducer } from \"./modules/root\";\n\nconst epicMiddleware = createEpicMiddleware();\n\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_햐COMPOSE__ || compose;\n\nexport const store = (function configureStore() {\n  const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(epicMiddleware))\n  );\n\n  epicMiddleware.run(rootEpic);\n\n  return store;\n})();\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { css } from \"@emotion/core\";\n\nexport default css`\n  @font-face {\n    font-family: \"HarryP\";\n    src: url(\"./fonts/HarryP.ttf\") format(\"truetype\");\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\",\n      \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\",\n      \"Helvetica Neue\", sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n      monospace;\n  }\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n\n  li {\n    list-style-type: none;\n  }\n\n  a {\n    color: inherit;\n    text-decoration: none;\n  }\n`;\n","import { Global } from \"@emotion/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport global from \"styles/global\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Global styles={global} />\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}