{"version":3,"sources":["logo.svg","features/counter/counterSlice.ts","styles/keyframes.ts","styles/common.ts","features/counter/counterStyles.ts","features/counter/Counter.tsx","services/potterapi.ts","features/sortingHat/sortingHatSlices.ts","features/sortingHat/sortingHatStyles.ts","components/LoadingContainer.tsx","features/sortingHat/SortingHat.tsx","App.tsx","app/store.ts","serviceWorker.ts","styles/global.ts","index.tsx"],"names":["module","exports","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","counter","floating","keyframes","rotating","button","css","row","rotatingKeyframes","textbox","asyncButton","Counter","count","useSelector","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","styles","aria-label","onClick","onChange","e","target","Number","amount","setTimeout","apiUrl","a","fetch","then","response","json","sortingHatSlice","isLoading","setSortingHat","setIsLoading","setSortingHatAsync","getSortingHat","selectSortingHat","sortingHat","selectSortingHatIsLoading","LoadingContainer","children","props","minHeight","wrapperStyle","fontSize","SortingHat","useEffect","App","AppLogo","AppHeader","link","navigation","alt","src","logo","to","path","store","configureStore","reducer","counterReducer","sortingHatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","global","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc499cad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8dad8028.svg\";","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\nimport { AppThunk, RootState } from \"../../app/store\";\n\ninterface CounterState {\n  value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount: number): AppThunk => (dispatch) => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\nexport default counterSlice.reducer;\n","import { keyframes } from \"@emotion/core\";\n\nexport const floating = keyframes`\n  0% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(10px)\n  }\n  100% {\n    transform: translateY(0px)\n  }\n  `;\n\nexport const rotating = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n","import { css } from \"@emotion/core\";\n\nimport { rotating as rotatingKeyframes } from \"./keyframes\";\n\nexport const button = css`\n  label: button;\n  appearance: none;\n  background: none;\n  font-size: 32px;\n  padding-left: 12px;\n  padding-right: 12px;\n  outline: none;\n  border: 2px solid transparent;\n  color: rgb(112, 76, 182);\n  padding-bottom: 4px;\n  cursor: pointer;\n  background-color: rgba(112, 76, 182, 0.1);\n  border-radius: 2px;\n  transition: all 0.15s;\n  &:hover,\n  &:focus {\n    border: 2px solid rgba(112, 76, 182, 0.4);\n  }\n  &:active {\n    background-color: rgba(112, 76, 182, 0.2);\n  }\n`;\n\nexport const row = css`\n  label: row;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  &:not(:last-child) {\n    margin-bottom: 16px;\n  }\n`;\n\nexport const value = css`\n  label: value;\n  font-size: 78px;\n  padding-left: 16px;\n  padding-right: 16px;\n  margin-top: 2px;\n  font-family: \"Courier New\", Courier, monospace;\n`;\n\nexport const rotating = css`\n  animation: ${rotatingKeyframes} 2s linear infinite;\n`;\n","import { css } from \"@emotion/core\";\n\nimport { button, row, value } from \"styles/common\";\n\nconst textbox = css`\n  label: textbox;\n  font-size: 32px;\n  padding: 2px;\n  width: 64px;\n  text-align: center;\n  margin-right: 8px;\n`;\n\nconst asyncButton = css`\n  label: asyncButton;\n  ${button};\n  position: relative;\n  margin-left: 8px;\n  &:after {\n    content: \"\";\n    background-color: rgba(112, 76, 182, 0.15);\n    display: block;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    transition: width 1s linear, opacity 0.5s ease 1s;\n  }\n  &:active:after {\n    width: 0%;\n    opacity: 1;\n    transition: 0s;\n  }\n`;\nexport default {\n  row,\n  value,\n  button,\n  textbox,\n  asyncButton,\n};\n","/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  decrement,\n  increment,\n  incrementAsync,\n  incrementByAmount,\n  selectCount,\n} from \"./counterSlice\";\nimport styles from \"./counterStyles\";\n\nexport function Counter() {\n  const count = useSelector(selectCount);\n  const dispatch = useDispatch();\n  const [incrementAmount, setIncrementAmount] = useState(\"2\");\n\n  return (\n    <div>\n      <div css={styles.row}>\n        <button\n          aria-label=\"Increment value\"\n          css={styles.button}\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n        <span css={styles.value}>{count}</span>\n        <button\n          aria-label=\"Decrement value\"\n          css={styles.button}\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n      </div>\n      <div css={styles.row}>\n        <input\n          aria-label=\"Set increment amount\"\n          css={styles.textbox}\n          onChange={(e) => setIncrementAmount(e.target.value)}\n          value={incrementAmount}\n        />\n        <button\n          css={styles.button}\n          onClick={() =>\n            dispatch(incrementByAmount(Number(incrementAmount) || 0))\n          }\n        >\n          Add Amount\n        </button>\n        <button\n          css={styles.asyncButton}\n          onClick={() => dispatch(incrementAsync(Number(incrementAmount) || 0))}\n        >\n          Add Async\n        </button>\n      </div>\n    </div>\n  );\n}\n","const apiUrl = \"https://www.potterapi.com/v1\";\n\nexport async function getSortingHat() {\n  return fetch(`${apiUrl}/sortingHat`).then((response) => {\n    return response.json();\n  });\n}\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\nimport { AppThunk, RootState } from \"../../app/store\";\n\nimport { getSortingHat } from \"services/potterapi\";\n\ninterface SortingHatState {\n  value: string;\n  isLoading: boolean;\n}\n\nconst initialState: SortingHatState = {\n  value: \"\",\n  isLoading: false,\n};\n\nexport const sortingHatSlice = createSlice({\n  name: \"sortingHat\",\n  initialState,\n  reducers: {\n    setSortingHat: (state, action: PayloadAction<string>) => {\n      state.value = action.payload;\n    },\n    setIsLoading: (state, action: PayloadAction<boolean>) => {\n      state.isLoading = action.payload;\n    },\n  },\n});\n\nexport const { setSortingHat, setIsLoading } = sortingHatSlice.actions;\n\nexport const setSortingHatAsync = (): AppThunk => (dispatch) => {\n  dispatch(setIsLoading(true));\n  getSortingHat().then((value) => {\n    dispatch(setSortingHat(value));\n    dispatch(setIsLoading(false));\n  });\n};\n\nexport const selectSortingHat = (state: RootState) => state.sortingHat.value;\nexport const selectSortingHatIsLoading = (state: RootState) =>\n  state.sortingHat.isLoading;\n\nexport default sortingHatSlice.reducer;\n","import { button, row, value } from \"styles/common\";\n\nexport default {\n  row,\n  value,\n  button,\n};\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\nimport { ReactNode } from \"react\";\n\nimport { rotating } from \"styles/common\";\n\ninterface LoadingContainerProps {\n  isLoading: boolean;\n  children: ReactNode;\n  minHeight?: string;\n}\n\nfunction LoadingContainer({\n  isLoading,\n  children,\n  minHeight,\n  ...props\n}: LoadingContainerProps) {\n  const wrapperStyle = css`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  `;\n\n  return (\n    <div css={wrapperStyle} {...props}>\n      {isLoading ? <AutorenewIcon css={rotating} fontSize=\"large\" /> : children}\n    </div>\n  );\n}\n\nexport default LoadingContainer;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  selectSortingHat,\n  selectSortingHatIsLoading,\n  setSortingHatAsync,\n} from \"./sortingHatSlices\";\n\nimport styles from \"./sortingHatStyles\";\n\nimport LoadingContainer from \"components/LoadingContainer\";\n\nfunction SortingHat() {\n  const dispatch = useDispatch();\n  const sortingHat = useSelector(selectSortingHat);\n  const isLoading = useSelector(selectSortingHatIsLoading);\n\n  useEffect(() => {\n    if (!sortingHat) {\n      dispatch(setSortingHatAsync());\n    }\n  }, [dispatch, sortingHat]);\n\n  return (\n    <div>\n      <div css={styles.row}>\n        <LoadingContainer\n          css={css`\n            min-height: 90px;\n          `}\n          isLoading={isLoading}\n        >\n          <span css={styles.value}>{sortingHat}</span>\n        </LoadingContainer>\n      </div>\n      <div css={styles.row}>\n        <button\n          css={styles.button}\n          onClick={() => dispatch(setSortingHatAsync())}\n        >\n          Randomize\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default SortingHat;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\n\nimport { NavLink, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport { Counter } from \"./features/counter/Counter\";\nimport logo from \"./logo.svg\";\n\nimport SortingHat from \"features/sortingHat/SortingHat\";\nimport { floating } from \"styles/keyframes\";\nimport { ThemeStyles } from \"styles/theme\";\n\nconst styles: ThemeStyles = {\n  App: css`\n    text-align: center;\n  `,\n  AppLogo: css`\n    height: 40vmin;\n    pointer-events: none;\n    @media (prefers-reduced-motion: no-preference) {\n      animation: ${floating} infinite 3s ease-in-out;\n    }\n  `,\n  AppHeader: css`\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n  `,\n  link: css`\n    color: rgb(112, 76, 182);\n  `,\n  navigation: css`\n    display: flex;\n\n    & > li {\n      margin: 0 12px;\n      padding: 8px 0;\n    }\n  `,\n};\n\nfunction App() {\n  return (\n    <div css={styles.App}>\n      <header css={styles.AppHeader}>\n        <img alt=\"logo\" css={styles.AppLogo} src={logo} />\n        <ul css={styles.navigation}>\n          <li>\n            <NavLink css={styles.link} to=\"/counter\">\n              Counter\n            </NavLink>\n          </li>\n          <li>\n            <NavLink css={styles.link} to=\"/sorting-hat\">\n              Sorting Hat\n            </NavLink>\n          </li>\n        </ul>\n        <Switch>\n          <Route path=\"/counter\">\n            <Counter />\n          </Route>\n          <Route path=\"/sorting-hat\">\n            <SortingHat />\n          </Route>\n          <Route path=\"*\">\n            <Redirect to=\"/counter\" />\n          </Route>\n        </Switch>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { Action, ThunkAction, configureStore } from \"@reduxjs/toolkit\";\n\nimport counterReducer from \"../features/counter/counterSlice\";\n\nimport sortingHatReducer from \"features/sortingHat/sortingHatSlices\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    sortingHat: sortingHatReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { css } from \"@emotion/core\";\n\nexport default css`\n  * {\n    box-sizing: border-box;\n  }\n\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\",\n      \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\",\n      \"Helvetica Neue\", sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n      monospace;\n  }\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n\n  li {\n    list-style-type: none;\n  }\n\n  a {\n    color: inherit;\n    text-decoration: none;\n  }\n`;\n","import { Global } from \"@emotion/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport global from \"styles/global\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Global styles={global} />\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}